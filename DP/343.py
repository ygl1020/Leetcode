#给你一个正数m让你求它的最大分离正数的乘积和
def integerBreak(self, n):
            """
            dp数组代表n=i时能拆分的最大乘积和. 0，1不能拆分所以从2开始才是1然后我们遍历时从3开始一直到n+1为止.
            拆分情况分为两种eg: n=8, 1) 拆分为i和j-->单独两个正数相乘 2) j和dp[i-j]这时代表拆分为多个数 3) 我们需要把dp[i]放在max函数里面用来储存找到的最大dp[i]否者后面继续遍历的话我们只会保留
            (i-j)*j,j*dp[i-j]的结果 即使这两个结果不是最大值.
            
            
            dp[i] 代表当n==i时所能拆分的所有可能性中的最大乘积和是dp[i],那么因为拆分最小是从2开始,数组可以初始化为dp[2]=1
            递推公式中,我们可以分为两种情况考虑,拆分为两个整数--> i*(i-j) 或者多个整数--> dp[i-j]*j, 已经再拆分过程中我们会计算出多个dp[i],所有我们要取其中的最大值,dp[i]
            因此递推公式为dp[i] = max((i-j)*j, j*dp[i-j], dp[i])
            这里第一个for循环代表dp[i]的拆分,第二个for循环代表所有拆分的正数可能性test all splits of i
            
            这里如果n=4,我们不是计算n=4的最大乘积和的,根据递推公式我们需要计算 1和3， 2和2 已经3和1的组合,那就是需要先计算dp[3]的值,所以需要先考虑组合1,2,2,1同理可得dp[4]一直到dp[9], 然后我们取最大值
            """
            dp = [0]*(n+1)
            dp[2]=1
            for i in range(3,n+1):
                for j in range(1,i):
                    dp[i] = max((i-j)*j,j*dp[i-j],dp[i]) 
            print(dp)
            return dp[n]